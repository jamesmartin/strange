#!/usr/bin/env bash
# vim: set ft=ruby:

exec /usr/bin/env ruby -x "$0" $*
#!ruby

require "chronic"
require "terminal-table"
require "timezone"

class FuzzyTimeParser

  TZ_ABR = /^(.*)([A-Z]{3,})$/

  # Public: parses a string and attempts to convert it to a date and time.
  # If a Timezone abreviation is given at the end of the raw_time, this method
  # attempts to construct a valid date and time in that timezone.
  #
  # Returns a Time/DateTime like object.
  def self.parse(raw_time)
    match = TZ_ABR.match(raw_time)
    if match.nil?
      Chronic.parse(raw_time) || Time.now
    else
      without_tz = Chronic.parse(match[1]) || Time.now
      DateTime.parse(without_tz.strftime("%F %T #{match[2]}"))
    end
  end
end

if __FILE__ == $0
  raw_time = ARGV.join(" ")
  time = FuzzyTimeParser.parse(raw_time)

  zones = [
    "Australia/Sydney",
    "America/Los_Angeles",
    "America/New_York",
    "Europe/Berlin",
    "Europe/London",
  ].freeze

  valid_timezones = zones.map do |name|
    Timezone[name]
  end.compact.sort

  title = "Local time: #{time}"
  table = Terminal::Table.new(title: title) do |t|
    valid_timezones.each do |zone|
      dst = zone.dst?(time) ? "DST" : ""
      t.add_row ["#{zone.name} (#{zone.abbr(time)})", dst, zone.time_with_offset(time)]
    end
  end

  puts table
end
